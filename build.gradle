buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.amazonaws:aws-java-sdk-core:1.11.649'
    }
}


import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.EnvironmentVariableCredentialsProvider

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven-publish'
    id 'maven'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    api 'io.vavr:vavr:0.10.2'


    // Use JUnit test framework
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.5.2'
    testImplementation 'org.hamcrest:hamcrest-core:2.2-rc1'
    testImplementation 'org.mockito:mockito-core:3.1.0'

}

test {
    println "Building version: ${artifactVersion}"
    useJUnitPlatform {
         includeEngines("junit-jupiter", "junit-vintage")
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}

static def isTag(){
    return System.getenv('TRAVIS_TAG') != null && !System.getenv('TRAVIS_TAG').isEmpty()
}

def static getPublishPath() {
    if(isTag()){
        return 'releases'
    } else{
        return 'snapshots'
    }
}

def getArtifactVersion(){
    if(isTag()){
        return System.getenv('TRAVIS_TAG');
    } else {
        return getRootProject().file('next-version.txt').text.trim() + '-SNAPSHOT'
    }
}

task updateVersion()  {
    def (major, minor, patch) = getArtifactVersion() =~ /\d+/
    def newVersion = Integer.parseInt(patch) + 1
    def nextVersion = major +"."+minor+"." + newVersion
    doLast {
        new File(projectDir, "version.txt").text = getArtifactVersion()
        new File(projectDir, "next-version.txt").text = nextVersion
    }
}

def fetchAwsCredentials = {
    try {
        return new EnvironmentVariableCredentialsProvider().credentials
    } catch (Exception e) {
        logger.debug('Unable to retrieve AWS credentials from profile, publishing to S3 will not be available.', e)
        return null
    }
}

AWSCredentials awsCredentials = fetchAwsCredentials()

publishing {
    repositories {
        maven {
            url "s3://repo.digitally.pink/$publishPath"
            credentials(AwsCredentials) {
                accessKey = awsCredentials.AWSAccessKeyId
                secretKey = awsCredentials.AWSSecretKey
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = 'pink.digitally.games.whot'
            artifactId = 'whot-engine'
            version = "${artifactVersion}"
            from components.java
        }
    }
}